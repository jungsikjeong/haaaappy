let Koa,Router,bodyParser,mongoose,api,jwtMiddleware;_706‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_706‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_706‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_706‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_706‍.w("./api",[["default",["api"],function(v){api=v}]]);_706‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);require('dotenv').config();








const { PORT, MONGO_URI } = process.env;

mongoose
  .connect(MONGO_URI, { useNewUrlParser: true, useFindAndModify: false })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((e) => {
    _706‍.g.console.log(e);
  });

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes());

// 라우터 적용 전에 bodyParser 적용
app.use(bodyParser());
app.use(jwtMiddleware);

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

const port = PORT || 4000;

app.listen(4000, () => {
  _706‍.g.console.log('Listening to port %d', port);
});
